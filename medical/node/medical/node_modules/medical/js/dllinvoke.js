const ffi  = require('ffi-napi')
const path = require('path')
const fs = require('fs');
const hisLogger = require("../../../src/hisLogger");


/**
 *
 * @param en_zh 字符串 en 英文状态 zh中文状态
 * @returns {Promise<void>}
 */
async function setImm32(en_zh){
    const imm32 = ffi.Library("imm32.dll", {
        'ImmSimulateHotKey': ["bool", ["long",'long']],
        'ImmSimulateHotKey': ["bool", ["long"]]
    });
    const user32 = ffi.Library("user32.dll", {
        'GetKeyboardLayout': ["long", ["long"]],
        'GetActiveWindow': ["long", ["long"]],
        'LoadKeyboardLayout': ["long", ["long"]],
        'ActivateKeyboardLayout': ["long", ["long"]]
    });
    const imeToggle=112;
    let current = user32.GetKeyboardLayout(0);
    hisLogger.hisLogger({LoadKeyboardLayout:current})
    if (en_zh=="en"){
        current = user32.GetKeyboardLayout(0);
    }else {
        current  = user32.LoadKeyboardLayout("0x0409", KLF_ACTIVATE)
        hisLogger.hisLogger({LoadKeyboardLayout:current})
    }
}

//设置Path环境环境
async function setDllDirectory(dllDirectory){
    const kernel32 = ffi.Library("kernel32", {
        'SetDllDirectoryA': ["bool", ["string"]]
    });
    kernel32.SetDllDirectoryA(dllDirectory)
}

async function invoke(dllDirectory,fileName,functionSymbol) {
    try {
        await setDllDirectory(dllDirectory);
        let fullPath = path.join(dllDirectory,fileName)

        hisLogger.hisLogger("信息：",fullPath,fileName,functionSymbol)
        let inits = ffi.Library(fullPath, functionSymbol);
        return inits;
    } catch(error) {
        hisLogger.hisLogger(error.toString())
    }
}



/**
 * 读取路径信息
 * @param {string} path 路径
 */
function getStat(path){
    return new Promise((resolve, reject) => {
        fs.stat(path, (err, stats) => {
            if(err){
                resolve(false);
            }else{
                resolve(stats);
            }
        })
    })
}

/**
 * 创建路径
 * @param {string} dir 路径
 */
function mkdir(dir){
    return new Promise((resolve, reject) => {
        fs.mkdir(dir, err => {
            if(err){
                resolve(false);
            }else{
                resolve(true);
            }
        })
    })
}

/**
 * 路径是否存在，不存在则创建
 * @param {string} dir 路径
 */
async function dirExists(dir){
    let isExists = await getStat(dir);
    //如果该路径且不是文件，返回true
    if(isExists && isExists.isDirectory()){
        return true;
    }else if(isExists){     //如果该路径存在但是文件，返回false
        return false;
    }
    //如果该路径不存在
    let tempDir = path.parse(dir).dir;      //拿到上级路径
    //递归判断，如果上级目录也不存在，则会代码会在此处继续循环执行，直到目录存在
    let status = await dirExists(tempDir);
    let mkdirStatus;
    if(status){
        mkdirStatus = await mkdir(dir);
    }
    return mkdirStatus;
}

module.exports={invoke,dirExists}
